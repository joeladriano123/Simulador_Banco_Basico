interface Transaction {
    id: number;
    amount: number;
    type: "deposit" | "withdrawal";
}

class BankAccount {
    private balance: number;
    private transactions: Transaction[] = [];
    private nextId: number = 1;
    
    constructor(initialBalance: number = 0) {
        this.balance = initialBalance;
        this.updateBalanceUI();
    }
    
    deposit(amount: number): void {
        if (amount > 0) {
            this.balance += amount;
            this.transactions.push({ id: this.nextId++, amount, type: "deposit" });
            this.updateBalanceUI();
            this.renderTransactions();
        } else {
            alert("Ingrese una cantidad válida para depositar.");
        }
    }
    
    withdraw(amount: number): void {
        if (amount > 0 && amount <= this.balance) {
            this.balance -= amount;
            this.transactions.push({ id: this.nextId++, amount, type: "withdrawal" });
            this.updateBalanceUI();
            this.renderTransactions();
        } else {
            alert("Fondos insuficientes o cantidad inválida.");
        }
    }
    
    getBalance(): void {
        const balanceDisplay = document.getElementById("balanceDisplay");
        if (balanceDisplay) {
            balanceDisplay.textContent = `Saldo: $${this.balance.toFixed(2)}`;
            balanceDisplay.style.display = "block";
            setTimeout(() => {
                balanceDisplay.style.display = "none";
            }, 3000);
        }
    }
    
    private updateBalanceUI(): void {
        const balanceElement = document.getElementById("balance");
        if (balanceElement) {
            balanceElement.textContent = `Saldo: $${this.balance.toFixed(2)}`;
        }
    }
    
    private renderTransactions(): void {
        const transactionList = document.getElementById("transactionList");
        if (transactionList) {
            transactionList.innerHTML = "";
            this.transactions.forEach(transaction => {
                const li = document.createElement("li");
                li.textContent = `${transaction.type === "deposit" ? "+" : "-"}$${transaction.amount.toFixed(2)}`;
                transactionList.appendChild(li);
            });
        }
    }
}

const account = new BankAccount();

document.getElementById("balanceIcon")?.addEventListener("click", () => {
    account.getBalance();
});

function depositMoney(): void {
    const depositInput = document.getElementById("depositInput") as HTMLInputElement;
    const amount = parseFloat(depositInput.value);
    if (!isNaN(amount)) {
        account.deposit(amount);
        depositInput.value = "";
    }
}

function withdrawMoney(): void {
    const withdrawInput = document.getElementById("withdrawInput") as HTMLInputElement;
    const amount = parseFloat(withdrawInput.value);
    if (!isNaN(amount)) {
        account.withdraw(amount);
        withdrawInput.value = "";
    }
}
